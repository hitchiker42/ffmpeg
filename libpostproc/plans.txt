Hi,
  You had asked me how my changes that I posted to the mailing list fit in with the assembly I'd written, so I figured I would tell you my overall plan so you know where I'm coming from. First, what I'm attempting to do with the changes I've posted to the mailing list is to ultimately move the logic for block size and number of blocks per loop iteration into the filter functions. I
think this will be the easiest way to integrate the simd versions, it should also help the non simd versions, since there will be fewer if/else checks in the main loop. 

  My plan to do this is to remove the BLOCK_SIZE macro and fix block size at 8x8, and wrap each C function in a loop, using a BLOCKS_PER_ITERATION to control the number of blocks at once. The reason I think the BLOCK_SIZE macro should be removed is because it doesn't really work, a lot of code implicitly depends on the block size being 8, changing it causes the fate-filter-pp tests to fail (I tried 16 and 4, I assume other values would cause the same result). The BLOCKS_PER_ITERATION macro would, I imagine, work he same as the commented out macro in postprocess.c NUM_BLOCKS_AT_ONCE would have, i.e control the number of 8x8 blocks processed by the filter functions. 
  I have a plan to incorporate the horizontal code into this new framework as well. I think I have a pretty good idea about how the transposing for the horizontal functions works now, though the transpose1 function is rather difficult to understand. Basically 2 blocks are kept in a temporary buffer when doing horizontal processing, as far as I can tell the blocks are stored by interleaving them, which is a bit confusing to understand. I would expand on this Idea and keep 5 blocks in a buffer, the transpose function(s) would deal with setting this up, and then it could be processed with the vertical functions, the same way the code is setup now. 

  My plan would be to have the temporary buffer be a 2x4 matrix of 8x8 blocks. If we take 5 blocks in a row horizontally 0-4 the first row would be 0-3 and the second would be 1-4. There are some issues in how to deal with the extra block, I think the easiest way would be to read the next horizontal block as block 5, and if there aren't any more blocks to fill block 5 with copies of the last line of block 4. Once this is all setup it should be fairly easy to just substitute the simd functions into the postprocess function, though I'm not exactly sure the best way to do this (i.e continue to use a template, use a script to generate all the different versions, etc..). My hope for this is that it will make it easy to add versions of the filters for different architectures, or to support larger simd registers, by changing BLOCKS_PER_ITERATION.
    
I also have a couple questions, if you wouldn't mind answering them. First, what is the format for tests in FFmpeg, or is there documentation I could read about testing. Secondly, where do the sources for the main pp_postprocess function come from, since they will need to be aligned correctly for the simd code, so some existing code (i.e the tests for libpostproc) may need to be changed.
    Thanks,
        Tucker DiNapoli
